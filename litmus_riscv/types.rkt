#lang racket

(require "sigs.rkt" ocelot)
(provide litmus-type-constraints)


; Constraints that convey type information about litmus test relations


(define (litmus-type-constraints)
  (and 
    (no (& MemoryEvent Int))
    ; for event type check
    (and 
        (no (& R (+ W F)))
        (no (& W (+ R F)))
        (no (& F (+ R W)))
        (no (& Amo F))
        (no (& XLr F))
        (no (& XSc F))
        (= (+ R W F MemoryEvent))
        (= (+ R W M))
    )
    ; atomic event
    (and 
        (in Amo R)
        (in Amo W)
        (in XLr R)
        (in XSc W)
    )
    (and 
        (in AQ (+ Amo X))
        (in RL (+ Amo X))
        (in AcqRel AQ)
        (in AcqRel RL)
        (in AQ Rcsc)
        (in RL Rcsc)
    )
    ; for relation
    (in po (-> MemoryEvent MemoryEvent))
    (in addrdp (-> MemoryEvent MemoryEvent))
    (in datadp (-> MemoryEvent MemoryEvent))
    (in ctrldp (-> MemoryEvent MemoryEvent))
    (in fence.rw.rw (-> MemoryEvent MemoryEvent))
    (in fence.rw.r (-> MemoryEvent MemoryEvent))
    (in fence.rw.w (-> MemoryEvent MemoryEvent))
    (in fence.r.rw (-> MemoryEvent MemoryEvent))
    (in fence.r.r (-> MemoryEvent MemoryEvent))
    (in fence.r.w (-> MemoryEvent MemoryEvent))
    (in fence.w.rw (-> MemoryEvent MemoryEvent))
    (in fence.w.r (-> MemoryEvent MemoryEvent))
    (in fence.w.w (-> MemoryEvent MemoryEvent))
    (in fence.tso (-> MemoryEvent MemoryEvent))
    (in rmw (-> XLr XSc))
    (in proc (-> MemoryEvent Int))
    (in loc (-> MemoryEvent Int))
    (in po-loc (-> MemoryEvent Int))
    (let ([rf (declare-relation 2 "rf")])
      (in rf (& (-> W R) (join loc (~ loc)) (join data (~ data)))))
    (let ([co (declare-relation 2 "co")])
      (in co (& (-> W W) (join loc (~ loc)) (join data (~ data)))))
    (let ([fr (declare-relation 2 "fr")])
      (in fr (& (-> R W) (join loc (~ loc)) (join data (~ data)))))
    (let ([rsw (declare-relation 2 "rsw")])
      (in rsw (& (-> R R) (join loc (~ loc)) (join data (~ data)))))
    (let ([rfi (declare-relation 2 "rfi")])
      (in rfi (& (-> W R) (join loc (~ loc)) (join data (~ data)) (join (proc (~ proc))))))
    (let ([rfe (declare-relation 2 "rfe")])
      (in rfe (- (& (-> W R) (join loc (~ loc)) (join data (~ data))) (join (proc (~ proc))))))
    (let ([coi (declare-relation 2 "coi")])
      (in coi (& (-> W W) (join loc (~ loc)) (join data (~ data)) (join (proc (~ proc))))))    
    (let ([coe (declare-relation 2 "coe")])
      (in coe (- (& (-> W W) (join loc (~ loc)) (join data (~ data))) (join (proc (~ proc))))))
    (let ([fri (declare-relation 2 "fri")])
      (in fri (& (-> R W) (join loc (~ loc)) (join data (~ data)) (join (proc (~ proc))))))
    (let ([fre (declare-relation 2 "fre")])
      (in fre (- (& (-> R W) (join loc (~ loc)) (join data (~ data))) (join (proc (~ proc))))))
  )
)